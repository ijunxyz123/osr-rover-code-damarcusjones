# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
# PyTurbo_Aero 3D Design Tutorial
In this tutorial you will learn how to construct a 3D Blade by stacking 2D designs on top of each other using a stacking line defined at the leading edge, centroid or trailing edge. Lets begin!
# PyTurbo_Aero 3D Design Tutorial
In this tutorial you will learn how to construct a 3D Blade by stacking 2D designs on top of each other using a stacking line defined at the leading edge, center or trailing edge. Lets begin!
name: Jones Technology Foundation https://colab.research.google.com/github/nasa/pyturbo-aero/blob/main/tutorials/3D_DesignTutorial.ipynb#scrollTo=TvsH0TTBpPfW## Adding Lean and Sweep
Lean and Sweep can be added by calling `lean_add` and `sweep`. Both lean and sweep are defined using bezier curve control points.

> Note: You can change the twist by messing with the stagger angle of the 2D Designs

> Another Note: The green profiles that you see are the control profiles that you specified at the hub, mid, and tip. These may not move with the design after you apply lean and sweep.

You can use lean and sweep with each other.# PyTurbo_Aero 3D Design Tutorial
In this tutorial you will learn how to construct a 3D Blade by stacking 2D designs on top of each other using a stacking line defined at the leading edge, centroid or trailing edge. Lets begin!https://colab.research.google.com/github/nasa/pyturbo-aero/blob/main/tutorials/3D_DesignTutorial.ipynb#scrollTo=HByjFk48KitH

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
